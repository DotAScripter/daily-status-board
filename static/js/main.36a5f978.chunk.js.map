{"version":3,"sources":["components/chart/chart.js","components/app/app.js","index.js"],"names":["window","chartColors","red","redOp","orange","yellow","green","greenOp","blue","purple","grey","chartData","labels","datasets","label","backgroundColor","borderColor","borderWidth","data","chartOptions","responsive","legend","display","tooltips","bodyFontSize","titleFontSize","scales","xAxes","stacked","ticks","fontSize","yAxes","suggestedMin","suggestedMax","BarChart","props","canvasRef","React","createRef","this","myChart","Chart","current","type","options","map","d","value","update","ref","Component","getRandomArray","numItems","i","push","Math","round","random","getRandomDateArray","baseTime","Date","getTime","time","getData","title","App","state","setInterval","setState","className","color","ReactDOM","render","document","getElementById"],"mappings":"0XAyBAA,OAAOC,YAAc,CACnBC,IAAK,mBACLC,MAAO,wBACPC,OAAQ,oBACRC,OAAQ,oBACRC,MAAO,mBACPC,QAAS,wBACTC,KAAM,oBACNC,OAAQ,qBACRC,KAAM,oBAGR,IAAIC,EAAY,CACdC,OAAQ,GACRC,SAAU,CAAC,CACTC,MAAO,OACPC,gBAAiBf,OAAOC,YAAYM,QACpCS,YAAahB,OAAOC,YAAYK,MAChCW,YAAa,EACbC,KAAM,IACL,CACDJ,MAAO,QACPC,gBAAiBf,OAAOC,YAAYE,MACpCa,YAAahB,OAAOC,YAAYC,IAChCe,YAAa,EACbC,KAAM,MAINC,EAAe,CACjBC,YAAY,EAEZC,OAAQ,CACNC,SAAS,GAEXC,SAAU,CACRC,aAAc,GACdC,cAAe,IAkBjBC,OAAQ,CACNC,MAAO,CAAC,CACNC,SAAS,EACTC,MAAO,CACLC,SAAU,MAGdC,MAAO,CAAC,CACNH,SAAS,EACTC,MAAO,CACLC,SAAU,GACVE,aAAc,EACdC,aAAc,OAqEPC,E,YA9Db,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,UAAYC,IAAMC,YAFN,E,iFAMjBC,KAAKC,QAAU,IAAIC,IAAMF,KAAKH,UAAUM,QAAS,CAC/CC,KAAM,MACNC,QAASzB,EACTD,KAAMP,M,2CAaR4B,KAAKC,QAAQtB,KAAKN,OAAS2B,KAAKJ,MAAMjB,KAAK2B,KAAI,SAAAC,GAAC,OAAIA,EAAEhC,SACtDyB,KAAKC,QAAQtB,KAAKL,SAAS,GAAGK,KAAOqB,KAAKJ,MAAMjB,KAAK2B,KAAI,SAAAC,GAAC,OAAIA,EAAEC,SAChER,KAAKC,QAAQQ,W,+BAIb,OACE,4BAAQC,IAAKV,KAAKH,gB,GA9BDC,IAAMa,WClF7B,SAASC,EAAeC,GAItB,IAFA,IACIlC,EAAO,GACHmC,EAAI,EAAGA,EAAID,EAAUC,IAC3BnC,EAAKoC,KAAK,CACRxC,MAJQ,6BAIKuC,GACbN,MAAOQ,KAAKC,MAAM,GAAK,GAAKD,KAAKE,YAGrC,OAAOvC,EAGT,SAASwC,EAAmBN,GAK1B,IAHA,IAAIlC,EAAO,GACPyC,EAAW,IAAIC,KAAK,uBAAuBC,UAEvCR,EAAI,EAAGA,EAAID,EAAUC,IAC3BnC,EAAKoC,KAAK,CACRQ,KAAM,IAAIF,KAAKD,EAHP,MAGkBN,GAC1BN,MAAOQ,KAAKC,MAAM,GAAK,GAAKD,KAAKE,YAGrC,OAAOvC,EAGT,SAAS6C,IACP,IAAI7C,EAAO,GAsBX,OApBAA,EAAKoC,KAAK,CACRU,MAAO,SACP9C,KAAMwC,EAAmB,OAG3BxC,EAAKoC,KAAK,CACRU,MAAO,aACP9C,KAAMiC,EAAe,MAGvBjC,EAAKoC,KAAK,CACRU,MAAO,aACP9C,KAAMiC,EAAe,MAGvBjC,EAAKoC,KAAK,CACRU,MAAO,SACP9C,KAAMiC,EAAe,KAGhBjC,E,IAiCM+C,E,YA7Bb,WAAY9B,GAAQ,IAAD,8BACjB,4CAAMA,KAED+B,MAAQ,CACXhD,KAAM6C,KAJS,E,iFAQE,IAAD,OAClB/D,OAAOmE,aAAY,WACjB,EAAKC,SAAS,CACZlD,KAAM6C,QAEP,O,+BAIH,OACE,yBAAKM,UAAU,OACb,kBAAC,EAAD,CACEnD,KAAMqB,KAAK2B,MAAMhD,KAAK,GAAGA,KACzB8C,MAAOzB,KAAK2B,MAAMhD,KAAK,GAAG8C,MAC1BM,MAAM,iB,GAvBEjC,IAAMa,WC9DxBqB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.36a5f978.chunk.js","sourcesContent":["import React from 'react';\r\nimport Chart from 'chart.js';\r\n\r\nimport './chart.css'\r\nimport './chart_controls.css'\r\n\r\n/*\r\n\r\nDeploy to GitHub Pages:\r\nhttps://dev.to/yuribenjamin/how-to-deploy-react-app-in-github-pages-2a1f\r\n\r\nChart JS:\r\nhttps://www.chartjs.org/\r\nhttps://www.chartjs.org/samples/latest/charts/bar/stacked.html\r\n\r\nChart JS & React:\r\nhttps://www.createwithdata.com/react-chartjs-dashboard/\r\n\r\nReact refs:\r\nhttps://reactjs.org/docs/forwarding-refs.html\r\nhttps://blog.logrocket.com/how-to-use-react-createref-ea014ad09dba/\r\n\r\n*/\r\n\r\n// TODO: Needed? Just input the rgb string directly in the chartData?\r\nwindow.chartColors = {\r\n  red: 'rgb(220, 20, 60)',\r\n  redOp: 'rgb(220, 20, 60, 0.6)',\r\n  orange: 'rgb(255, 159, 64)',\r\n  yellow: 'rgb(255, 205, 86)',\r\n  green: 'rgb(34, 175, 34)',\r\n  greenOp: 'rgb(34, 175, 34, 0.6)',\r\n  blue: 'rgb(54, 162, 235)',\r\n  purple: 'rgb(153, 102, 255)',\r\n  grey: 'rgb(231,233,237)'\r\n};\r\n\r\nvar chartData = {\r\n  labels: [],\r\n  datasets: [{\r\n    label: 'Plus',\r\n    backgroundColor: window.chartColors.greenOp,\r\n    borderColor: window.chartColors.green,\r\n    borderWidth: 1,\r\n    data: []\r\n  }, {\r\n    label: 'Minus',\r\n    backgroundColor: window.chartColors.redOp,\r\n    borderColor: window.chartColors.red,\r\n    borderWidth: 1,\r\n    data: []\r\n  }]\r\n}; // chartData\r\n\r\nlet chartOptions = {\r\n  responsive: true,\r\n  // maintainAspectRatio: false,\r\n  legend: {\r\n    display: false,\r\n  },\r\n  tooltips: {\r\n    bodyFontSize: 36,\r\n    titleFontSize: 18,\r\n        // callbacks: {\r\n        //   title: function(tooltipItem, data) {\r\n        //     // console.log(\"You're hovering on index: \" + tooltipItem[0]['index']);\r\n        //     return \"Comment:\";// + data['labels'][tooltipItem[0]['index']];\r\n        //   },\r\n        //   label: function(tooltipItem, data) {\r\n        //     // return data['datasets'][0]['data'][tooltipItem['index']];\r\n        //     let index = tooltipItem['index'];\r\n        //     return DAILY_COMMENTS[index];\r\n        //   },\r\n        //   afterLabel: function(tooltipItem, data) {\r\n        //     // var dataset = data['datasets'][0];\r\n        //     // var percent = Math.round((dataset['data'][tooltipItem['index']] / dataset[\"_meta\"][0]['total']) * 100)\r\n        //     // return '(' + percent + '%)';\r\n        //   }\r\n        // }\r\n  },\r\n  scales: {\r\n    xAxes: [{\r\n      stacked: true,\r\n      ticks: {\r\n        fontSize: 15,\r\n      }\r\n    }],\r\n    yAxes: [{\r\n      stacked: true,\r\n      ticks: {\r\n        fontSize: 25,\r\n        suggestedMin: 0,\r\n        suggestedMax: 8,\r\n      }\r\n    }]\r\n    }\r\n  }; // chartOptions\r\n\r\nclass BarChart extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.canvasRef = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.myChart = new Chart(this.canvasRef.current, {\r\n      type: 'bar',\r\n      options: chartOptions,\r\n      data: chartData,\r\n      // {\r\n      //   labels: this.props.data.map(d => d.label),\r\n      //   datasets: [{\r\n      //     label: this.props.title,\r\n      //     data: this.props.data.map(d => d.value),\r\n      //     backgroundColor: this.props.color\r\n      //   }]\r\n      // }\r\n    });\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.myChart.data.labels = this.props.data.map(d => d.label);\r\n    this.myChart.data.datasets[0].data = this.props.data.map(d => d.value);\r\n    this.myChart.update();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <canvas ref={this.canvasRef} />\r\n    );\r\n  }\r\n} // BarChart\r\n\r\n// function Chart() {\r\n//   return (\r\n//     <div id=\"left-container\">\r\n//       <div id=\"chart-container\">\r\n//         <BarChart\r\n//           data={chartData}\r\n//           title=\"My amazing data\"\r\n//           color=\"#70CAD1\"\r\n//         />\r\n//       </div>\r\n//       <div id=\"chart-controls\">\r\n//         <div id=\"input-container\">\r\n//           <div id=\"plus-container\">\r\n//             <input type=\"number\" id=\"plusInput\" value=\"0\"/>\r\n//             <button id=\"plusButton\">+</button>\r\n//           </div>\r\n//         <div id=\"minus-container\">\r\n//           <input type=\"number\" id=\"minusInput\" value=\"0\"/>\r\n//           <button id=\"minusButton\">-</button>\r\n//         </div>\r\n//       </div>\r\n//         <button id=\"submitData\">Submit</button>\r\n//         <button id=\"addPostit\">Add Postit</button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\nexport default BarChart;","import React from 'react';\nimport './app.css';\n\nimport BarChart from '../chart/chart';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//       <p>Hej hej</p>\n//       </header>\n//     </div>\n//   );\n// }\n\n// Data generation\nfunction getRandomArray(numItems) {\n  // Create random array of objects\n  let names = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let data = [];\n  for(var i = 0; i < numItems; i++) {\n    data.push({\n      label: names[i],\n      value: Math.round(20 + 80 * Math.random())\n    });\n  }\n  return data;\n}\n\nfunction getRandomDateArray(numItems) {\n  // Create random array of objects (with date)\n  let data = [];\n  let baseTime = new Date('2018-05-01T00:00:00').getTime();\n  let dayMs = 24 * 60 * 60 * 1000;\n  for(var i = 0; i < numItems; i++) {\n    data.push({\n      time: new Date(baseTime + i * dayMs),\n      value: Math.round(20 + 80 * Math.random())\n    });\n  }\n  return data;\n}\n\nfunction getData() {\n  let data = [];\n\n  data.push({\n    title: 'Visits',\n    data: getRandomDateArray(150)\n  });\n\n  data.push({\n    title: 'Categories',\n    data: getRandomArray(20)\n  });\n\n  data.push({\n    title: 'Categories',\n    data: getRandomArray(10)\n  });\n\n  data.push({\n    title: 'Data 4',\n    data: getRandomArray(6)\n  });\n\n  return data;\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data: getData()\n    };\n  }\n\n  componentDidMount() {\n    window.setInterval(() => {\n      this.setState({\n        data: getData()\n      })\n    }, 5000)\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <BarChart\n          data={this.state.data[1].data}\n          title={this.state.data[1].title}\n          color=\"#70CAD1\"\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './components/app/app';\n// import Chart from './components/chart/chart';\n\nReactDOM.render(<App />, document.getElementById('root'));\n// ReactDOM.render(<Chart />, document.getElementById('left-container'));\n"],"sourceRoot":""}