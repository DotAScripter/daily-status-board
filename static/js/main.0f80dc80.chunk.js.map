{"version":3,"sources":["components/Chart.js","components/constants.js","components/trace.js","components/ChartInput.js","components/dates.js","components/random.js","components/ChartHandler.js","components/PostItContainer.js","components/PostItControls.js","components/PostItHandler.js","index.js"],"names":["chartData","labels","datasets","label","backgroundColor","borderColor","borderWidth","data","chartOptions","responsive","maintainAspectRatio","legend","display","tooltips","bodyFontSize","titleFontSize","scales","xAxes","stacked","ticks","fontSize","yAxes","suggestedMin","suggestedMax","BarChart","props","canvasRef","React","createRef","this","myChart","Chart","current","type","options","map","d","nrPlus","nrMinus","update","className","ref","Component","WEEKDAYS","MAX_DATA_INPUT","ENABLE_DEBUG","TRACE_DEBUG","string","Constants","console","log","ControlledNumberInput","updateNumber","bind","value","number","readOnly","buttonClass","onClick","buttonText","SubmitButton","ChartInput","state","isValidInput","handleSubmit","updatePlus","updateMinus","setState","onSubmit","reset","getIsoDate","Date","toISOString","slice","getWeekdayName","date","getDay","randomIntFromInterval","min","max","Math","floor","random","getRandomTestData","numItems","i","setDate","getDate","push","DatesHelper","Random","ChartHandler","dataArray","updateChart","todaysDate","newData","length","shift","cookiesData","Cookies","getJSON","undefined","set","Fragment","PostItContainer","AddPostItButton","PostItControls","PostItHandler","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0f80dc80.chunk.js","sourcesContent":["import React from 'react';\r\nimport Chart from 'chart.js';\r\n\r\nvar chartData = {\r\n  labels: [],\r\n  datasets: [{\r\n    label: 'Plus',\r\n    backgroundColor: 'rgb(34, 175, 34, 0.6)', // Green, opacity\r\n    borderColor: 'rgb(34, 175, 34)', // Green\r\n    borderWidth: 1,\r\n    data: []\r\n  }, {\r\n    label: 'Minus',\r\n    backgroundColor: 'rgb(220, 20, 60, 0.6)', // Red, opacity\r\n    borderColor: 'rgb(220, 20, 60)', // Red\r\n    borderWidth: 1,\r\n    data: []\r\n  }]\r\n}; // chartData\r\n\r\nlet chartOptions = {\r\n  responsive: true,\r\n  maintainAspectRatio: false,\r\n  legend: {\r\n    display: false,\r\n  },\r\n  tooltips: {\r\n    bodyFontSize: 36,\r\n    titleFontSize: 18,\r\n        // callbacks: {\r\n        //   title: function(tooltipItem, data) {\r\n        //     // console.log(\"You're hovering on index: \" + tooltipItem[0]['index']);\r\n        //     return \"Comment:\";// + data['labels'][tooltipItem[0]['index']];\r\n        //   },\r\n        //   label: function(tooltipItem, data) {\r\n        //     // return data['datasets'][0]['data'][tooltipItem['index']];\r\n        //     let index = tooltipItem['index'];\r\n        //     return DAILY_COMMENTS[index];\r\n        //   },\r\n        //   afterLabel: function(tooltipItem, data) {\r\n        //     // var dataset = data['datasets'][0];\r\n        //     // var percent = Math.round((dataset['data'][tooltipItem['index']] / dataset[\"_meta\"][0]['total']) * 100)\r\n        //     // return '(' + percent + '%)';\r\n        //   }\r\n        // }\r\n  },\r\n  scales: {\r\n    xAxes: [{\r\n      stacked: true,\r\n      ticks: {\r\n        fontSize: 15,\r\n      }\r\n    }],\r\n    yAxes: [{\r\n      stacked: true,\r\n      ticks: {\r\n        fontSize: 25,\r\n        suggestedMin: -5,\r\n        suggestedMax: 8,\r\n      }\r\n    }]\r\n    }\r\n  }; // chartOptions\r\n\r\nclass BarChart extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.canvasRef = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.myChart = new Chart(this.canvasRef.current, {\r\n      type: 'bar',\r\n      options: chartOptions,\r\n      data: chartData,\r\n    });\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.myChart.data.labels = this.props.data.map(d => d.label);\r\n    this.myChart.data.datasets[0].data = this.props.data.map(d => d.nrPlus);\r\n    this.myChart.data.datasets[1].data = this.props.data.map(d => d.nrMinus);\r\n    this.myChart.update();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"chart-container\">\r\n        <canvas ref={this.canvasRef} />\r\n      </div>\r\n    );\r\n  }\r\n} // BarChart\r\n\r\nexport default BarChart;","// ChartHandler.js\r\nexport const MAX_DATA_LENGTH = 10; // At most 10 days showing in the chart\r\nexport const WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\nexport const COOKIES_NAME = 'ChartData';\r\n\r\n// ChartInput.js\r\nexport const MAX_DATA_INPUT = 15;  // At most 15 +/- in input\r\n\r\n// trace.js\r\nexport const ENABLE_DEBUG = true;","import * as Constants from './constants'\r\n\r\n/**\r\n * Prefaces the given string with '[DEBUG]' and prints to console.\r\n * Only prints if debug traces are enabled\r\n */\r\nexport default function TRACE_DEBUG(string) {\r\n  if(Constants.ENABLE_DEBUG === true) {\r\n    console.log('[DEBUG] ' + string);\r\n  }\r\n}","import React from 'react';\r\n\r\nimport './ChartInput.css'\r\nimport TRACE_DEBUG from './trace'\r\nimport * as Constants from './constants'\r\n\r\nclass ControlledNumberInput extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.updateNumber = this.updateNumber.bind(this);\r\n  }\r\n\r\n  updateNumber() {\r\n    this.props.updateNumber();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"plus-minus-container\">\r\n        <input className=\"plus-minus-input\"\r\n          type=\"number\"\r\n          value={this.props.number}\r\n          readOnly\r\n        />\r\n        <button \r\n          className={`plus-minus-button ${this.props.buttonClass}`}\r\n          onClick={this.updateNumber}\r\n        >\r\n          {this.props.buttonText}\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction SubmitButton(props) {\r\n  return(\r\n    <button className=\"submitData\" onClick={props.onClick}>Submit</button>\r\n  );\r\n}\r\n\r\nclass ChartInput extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      nrPlus: 0,\r\n      nrMinus: 0,\r\n    };\r\n\r\n    this.isValidInput = this.isValidInput.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.updatePlus = this.updatePlus.bind(this);\r\n    this.updateMinus = this.updateMinus.bind(this);\r\n  }\r\n\r\n  reset() {\r\n    this.setState({nrPlus: 0, nrMinus: 0});\r\n  }\r\n\r\n  isValidInput(nrPlus, nrMinus) {\r\n   if(nrPlus === 0 && nrMinus === 0) {\r\n      TRACE_DEBUG('No valid input data (nrPlus: 0, nrMinus: 0)');\r\n      return false;\r\n    } else if(nrPlus < 0 || nrMinus < 0) {\r\n      TRACE_DEBUG('No valid input data (nrPlus < 0 or nrMinus < 0)');\r\n      return false;\r\n    }\r\n\r\n    if(nrPlus > Constants.MAX_DATA_INPUT || nrMinus > Constants.MAX_DATA_INPUT) {\r\n      TRACE_DEBUG('No valid input data, (nrPlus or nrMinus > MAX_DATA_INPUT (' + Constants.MAX_DATA_INPUT + '))');\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n\r\n  handleSubmit() {\r\n    if(this.isValidInput(this.state.nrPlus, this.state.nrMinus)) {\r\n      this.props.onSubmit(this.state.nrPlus, this.state.nrMinus);\r\n    }\r\n    this.reset();\r\n  }\r\n\r\n  updatePlus() {\r\n    this.setState({nrPlus: this.state.nrPlus + 1});\r\n  }\r\n\r\n  updateMinus() {\r\n    this.setState({nrMinus: this.state.nrMinus + 1});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"chart-controls\">\r\n        <div className=\"input-container\">\r\n          <ControlledNumberInput\r\n            buttonClass=\"plusButton\"\r\n            buttonText=\"+\"\r\n            number={this.state.nrPlus}\r\n            updateNumber={this.updatePlus}\r\n          />\r\n          <ControlledNumberInput\r\n            buttonClass=\"minusButton\"\r\n            buttonText=\"-\"\r\n            number={this.state.nrMinus}\r\n            updateNumber={this.updateMinus}\r\n          />\r\n        </div>\r\n        <SubmitButton onClick={this.handleSubmit}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ChartInput;","\r\nimport * as Constants from './constants'\r\n\r\n/**\r\n * Returns the given date as YYYY-MM-DD\r\n */\r\nexport function getIsoDate(date = new Date()) {\r\n  return date.toISOString().slice(0,10);\r\n}\r\n\r\n/**\r\n * Returns string 'Monday', 'Tuesday' etc.\r\n */\r\nexport function getWeekdayName(date = new Date()) {\r\n  return Constants.WEEKDAYS[date.getDay()]\r\n}","/**\r\n * Returns a random integer between min and max (min and max included)\r\n */\r\nexport function randomIntFromInterval(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}","import React from 'react'\r\nimport Cookies from 'js-cookie'\r\n\r\nimport './ChartHandler.css'\r\n\r\nimport BarChart from './Chart'\r\nimport ChartInput from './ChartInput'\r\nimport * as Constants from './constants'\r\nimport * as DatesHelper from './dates'\r\nimport TRACE_DEBUG from './trace'\r\nimport * as Random from './random'\r\n\r\nfunction getRandomTestData(numItems) {\r\n  let data = [];\r\n  for(var i = 0; i < numItems; i++) {\r\n    let date = new Date();\r\n    date.setDate(new Date().getDate() - (numItems - i)); // Start numItems days ago and count up\r\n\r\n    data.push({\r\n      label: DatesHelper.getWeekdayName(date),\r\n      nrPlus: Random.randomIntFromInterval(0, Constants.MAX_DATA_INPUT),\r\n      nrMinus: Random.randomIntFromInterval(0, Constants.MAX_DATA_INPUT) * -1,\r\n      date: DatesHelper.getIsoDate(date),\r\n    });\r\n  }\r\n  return data;\r\n}\r\n\r\nclass ChartHandler extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      // dataArray = [{label, nrPlus, nrMinus, date}, ...]\r\n      dataArray: []\r\n    };\r\n\r\n    this.updateChart = this.updateChart.bind(this);\r\n  }\r\n\r\n  updateChart(nrPlus, nrMinus) {\r\n    let data = this.state.dataArray;\r\n    let todaysDate = DatesHelper.getIsoDate();\r\n    // TODO: Add yesterdays weekdayName? Cause we're reporting for yesterday?\r\n    let newData = {label: DatesHelper.getWeekdayName(), nrPlus: nrPlus, nrMinus: nrMinus * -1, date: todaysDate};\r\n\r\n    // Overwrite last data input if submitting new data on the same day\r\n    if(data[data.length - 1].date === todaysDate) {\r\n      TRACE_DEBUG('Overwriting last datapoint');\r\n\r\n      data[data.length - 1] = newData;\r\n      this.setState({\r\n        dataArray: data\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    // Remove first value in array\r\n    if (data.length >= Constants.MAX_DATA_LENGTH) {\r\n      TRACE_DEBUG('At max data length (' + Constants.MAX_DATA_LENGTH + '), removing first datapoint');\r\n\r\n      data.shift();\r\n      this.setState({\r\n        dataArray: [...data, newData]\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    this.setState({\r\n      dataArray: [...data, newData]\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    let cookiesData = Cookies.getJSON(Constants.COOKIES_NAME);\r\n    if(cookiesData !== undefined) {\r\n      TRACE_DEBUG('Initiating chart with previously saved data');\r\n      this.setState({ dataArray: cookiesData });\r\n    }\r\n    else {\r\n      TRACE_DEBUG('Initiating chart with random test data');\r\n      this.setState({ dataArray: getRandomTestData(8) });\r\n    }    \r\n\r\n    // window.setInterval(() => {\r\n    //   this.setState({\r\n    //     data: getData()\r\n    //   })\r\n    // }, 5000)\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    Cookies.set(Constants.COOKIES_NAME, this.state.dataArray);\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <React.Fragment>\r\n        <BarChart data={this.state.dataArray} />\r\n        <ChartInput onSubmit={this.updateChart} />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ChartHandler;","import React from 'react'\r\nimport Cookies from 'js-cookie'\r\n\r\nimport './PostItContainer.css'\r\n\r\nclass PostItContainer extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      \r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n  }\r\n\r\n  componentDidUpdate() {\r\n\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div className=\"post-it-container\">\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PostItContainer;","import React from 'react';\r\n\r\nimport './PostItControls.css'\r\n\r\nfunction AddPostItButton(props) {\r\n  return(\r\n    <button className=\"add-post-it\">Add Post It</button>\r\n  );\r\n}\r\n\r\nclass PostItControls extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"post-it-controls\">\r\n        <AddPostItButton />\r\n        {/*Trashcan image */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PostItControls;","import React from 'react'\r\n\r\nimport './PostItHandler.css'\r\n\r\nimport PostItContainer from './PostItContainer'\r\nimport PostItControls from './PostItControls'\r\n\r\nclass PostItHandler extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      \r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n  }\r\n\r\n  componentDidUpdate() {\r\n\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <React.Fragment>\r\n        <PostItContainer />\r\n        <PostItControls />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PostItHandler;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport ChartHandler from './components/ChartHandler';\r\nimport PostItHandler from './components/PostItHandler';\r\n\r\n/*\r\nhttps://reactjs.org/docs/thinking-in-react.html\r\n\r\n- ChartHandler: State=[{label, nrPlus, nrMinus, date}, ...]\r\n  - Chart: Props=[{date, nrPlus, nrMinus}, ...]\r\n  - ChartInput State{nrPlus, nrMinus} Props={update function}\r\n    - NumberInput: Props={nrPlus}\r\n    - NumberInput: Props={nrMinus}\r\n    - SubmitButton: Props={onSubmit = update function}\r\n\r\n- PostItHandler: State=[]\r\n  - PostItContainer\r\n  - PostItControls\r\n    - AddPostItButton\r\n    - Trashcan\r\n\r\nDeploy to GitHub Pages:\r\nhttps://dev.to/yuribenjamin/how-to-deploy-react-app-in-github-pages-2a1f\r\n\r\nChart JS:\r\nhttps://www.chartjs.org/\r\nhttps://www.chartjs.org/samples/latest/charts/bar/stacked.html\r\n\r\nChart JS & React:\r\nhttps://www.createwithdata.com/react-chartjs-dashboard/\r\n\r\nReact refs:\r\nhttps://reactjs.org/docs/forwarding-refs.html\r\nhttps://blog.logrocket.com/how-to-use-react-createref-ea014ad09dba/\r\n\r\n*/\r\n\r\n/*\r\nFor ChartController maybe?\r\nhttps://reactpatterns.com/\r\n\r\nhandleEvent({type}) {\r\n  switch(type) {\r\n    case \"click\":\r\n    case \"mouseenter\":\r\n      return this.setState({ hovered: true })\r\n    case \"mouseleave\":\r\n      return this.setState({ hovered: false })\r\n    default:\r\n      return console.warn(`No case for event type \"${type}\"`)\r\n  }\r\n}\r\n\r\nclass ControlledNameInput extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = { name: \"\" };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <input\r\n        value={this.state.name}\r\n        onChange={e => this.setState({ name: e.target.value })}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\n*/\r\n\r\nReactDOM.render(<ChartHandler />, document.getElementById('chart-handler'));\r\nReactDOM.render(<PostItHandler />, document.getElementById('post-it-handler'));"],"sourceRoot":""}