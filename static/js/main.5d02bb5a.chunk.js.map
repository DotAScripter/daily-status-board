{"version":3,"sources":["components/Chart.js","components/ChartControls.js","components/ChartHandler.js","index.js"],"names":["chartData","labels","datasets","label","backgroundColor","borderColor","borderWidth","data","chartOptions","responsive","maintainAspectRatio","legend","display","tooltips","bodyFontSize","titleFontSize","scales","xAxes","stacked","ticks","fontSize","yAxes","suggestedMin","suggestedMax","BarChart","props","canvasRef","React","createRef","this","myChart","Chart","current","type","options","map","d","plus","minus","update","className","ref","Component","ControlledNumberInput","updateNumber","bind","containerClass","value","number","inputClass","readOnly","buttonClass","onClick","buttonText","SubmitButton","ChartControls","state","handleSubmit","updatePlus","updateMinus","setState","event","preventDefault","onSubmit","reset","getRandomArray","numItems","i","push","Math","round","random","getData","title","ChartHandler","dataArray","updateChart","newData","length","console","log","Fragment","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5d02bb5a.chunk.js","sourcesContent":["import React from 'react';\r\nimport Chart from 'chart.js';\r\n\r\nvar chartData = {\r\n  labels: [],\r\n  datasets: [{\r\n    label: 'Plus',\r\n    backgroundColor: 'rgb(34, 175, 34, 0.6)', // Green, opacity\r\n    borderColor: 'rgb(34, 175, 34)', // Green\r\n    borderWidth: 1,\r\n    data: []\r\n  }, {\r\n    label: 'Minus',\r\n    backgroundColor: 'rgb(220, 20, 60, 0.6)', // Red, opacity\r\n    borderColor: 'rgb(220, 20, 60)', // Red\r\n    borderWidth: 1,\r\n    data: []\r\n  }]\r\n}; // chartData\r\n\r\nlet chartOptions = {\r\n  responsive: true,\r\n  maintainAspectRatio: false,\r\n  legend: {\r\n    display: false,\r\n  },\r\n  tooltips: {\r\n    bodyFontSize: 36,\r\n    titleFontSize: 18,\r\n        // callbacks: {\r\n        //   title: function(tooltipItem, data) {\r\n        //     // console.log(\"You're hovering on index: \" + tooltipItem[0]['index']);\r\n        //     return \"Comment:\";// + data['labels'][tooltipItem[0]['index']];\r\n        //   },\r\n        //   label: function(tooltipItem, data) {\r\n        //     // return data['datasets'][0]['data'][tooltipItem['index']];\r\n        //     let index = tooltipItem['index'];\r\n        //     return DAILY_COMMENTS[index];\r\n        //   },\r\n        //   afterLabel: function(tooltipItem, data) {\r\n        //     // var dataset = data['datasets'][0];\r\n        //     // var percent = Math.round((dataset['data'][tooltipItem['index']] / dataset[\"_meta\"][0]['total']) * 100)\r\n        //     // return '(' + percent + '%)';\r\n        //   }\r\n        // }\r\n  },\r\n  scales: {\r\n    xAxes: [{\r\n      stacked: true,\r\n      ticks: {\r\n        fontSize: 15,\r\n      }\r\n    }],\r\n    yAxes: [{\r\n      stacked: true,\r\n      ticks: {\r\n        fontSize: 25,\r\n        suggestedMin: 0,\r\n        suggestedMax: 8,\r\n      }\r\n    }]\r\n    }\r\n  }; // chartOptions\r\n\r\nclass BarChart extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.canvasRef = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.myChart = new Chart(this.canvasRef.current, {\r\n      type: 'bar',\r\n      options: chartOptions,\r\n      data: chartData,\r\n    });\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.myChart.data.labels = this.props.data.map(d => d.label);\r\n    this.myChart.data.datasets[0].data = this.props.data.map(d => d.plus);\r\n    this.myChart.data.datasets[1].data = this.props.data.map(d => d.minus);\r\n    this.myChart.update();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"chart-container\">\r\n        <canvas ref={this.canvasRef} />\r\n      </div>\r\n    );\r\n  }\r\n} // BarChart\r\n\r\nexport default BarChart;","import React from 'react';\r\n\r\nimport './ChartControls.css'\r\n\r\nclass ControlledNumberInput extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.updateNumber = this.updateNumber.bind(this);\r\n  }\r\n\r\n  updateNumber() {\r\n    this.props.updateNumber();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={this.props.containerClass}>\r\n        <input\r\n          type=\"number\"\r\n          value={this.props.number}\r\n          className={this.props.inputClass}\r\n          readOnly\r\n        />\r\n        <button \r\n          className={this.props.buttonClass}\r\n          onClick={this.updateNumber}\r\n        >\r\n          {this.props.buttonText}\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction SubmitButton(props) {\r\n  return(\r\n    <button className=\"submitData\" onClick={props.onClick}>Submit</button>\r\n  );\r\n}\r\n\r\nclass ChartControls extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      plus: 0,\r\n      minus: 0,\r\n    };\r\n\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.updatePlus = this.updatePlus.bind(this);\r\n    this.updateMinus = this.updateMinus.bind(this);\r\n  }\r\n\r\n  reset() {\r\n    this.setState({plus: 0, minus: 0});\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    this.props.onSubmit(this.state.plus, this.state.minus);\r\n    this.reset();\r\n  }\r\n\r\n  // handleChange = (event) => {\r\n  //   let name = event.target.name;\r\n  //   let value = event.target.value;\r\n  //   this.setState({[name]: value});\r\n  // }\r\n\r\n  updatePlus() {\r\n    this.setState({plus: this.state.plus + 1});\r\n  }\r\n\r\n  updateMinus() {\r\n    this.setState({minus: this.state.minus + 1});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"chart-controls\">\r\n        <div className=\"input-container\">\r\n          {/*<form onSubmit={this.handleSubmit}>\r\n            <div className=\"plus-container\">\r\n              <input\r\n                className=\"plusInput\"\r\n                type=\"number\"\r\n                name=\"plus\"\r\n                value={this.state.plus}\r\n                onChange={this.handleChange}\r\n              />\r\n              <button className=\"plusButton\">+</button>\r\n            </div>\r\n            <div className=\"minus-container\">\r\n              <input\r\n                className=\"minusInput\"\r\n                type=\"number\"\r\n                name=\"minus\"\r\n                value={this.state.minus}\r\n                onChange={this.handleChange}\r\n              />\r\n              <button className=\"minusButton\">-</button>\r\n            </div>\r\n            <button type=\"submit\" className=\"submitData\">\r\n              Submit\r\n            </button>\r\n          </form> */}\r\n          <ControlledNumberInput\r\n            containerClass=\"plus-container\"\r\n            inputClass=\"plusInput\"\r\n            buttonClass=\"plusButton\"\r\n            buttonText=\"+\"\r\n            number={this.state.plus}\r\n            updateNumber={this.updatePlus}\r\n          />\r\n          <ControlledNumberInput\r\n            containerClass=\"minus-container\"\r\n            inputClass=\"minusInput\"\r\n            buttonClass=\"minusButton\"\r\n            buttonText=\"-\"\r\n            number={this.state.minus}\r\n            updateNumber={this.updateMinus}\r\n          />\r\n        </div>\r\n        <SubmitButton onClick={this.handleSubmit}/>\r\n        {/*<button className=\"addPostit\">Add Postit</button>*/}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ChartControls;","import React from 'react';\r\n\r\nimport './ChartHandler.css';\r\n\r\nimport BarChart from './Chart';\r\nimport ChartControls from './ChartControls'\r\n\r\n// Data generation\r\nfunction getRandomArray(numItems) {\r\n  // Create random array of objects\r\n  let names = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n  let data = [];\r\n  for(var i = 0; i < numItems; i++) {\r\n    data.push({\r\n      label: names[i],\r\n      plus: Math.round(20 + 80 * Math.random()),\r\n      minus: Math.round(20 + 80 * Math.random()) * -1\r\n    });\r\n  }\r\n  return data;\r\n}\r\n\r\nfunction getRandomDateArray(numItems) {\r\n  // Create random array of objects (with date)\r\n  let data = [];\r\n  let baseTime = new Date('2018-05-01T00:00:00').getTime();\r\n  let dayMs = 24 * 60 * 60 * 1000;\r\n  for(var i = 0; i < numItems; i++) {\r\n    data.push({\r\n      time: new Date(baseTime + i * dayMs),\r\n      value: Math.round(20 + 80 * Math.random())\r\n    });\r\n  }\r\n  return data;\r\n}\r\n\r\nfunction getData() {\r\n  let data = [];\r\n\r\n  // data.push({\r\n  //   title: 'Visits',\r\n  //   data: getRandomDateArray(150)\r\n  // });\r\n\r\n  data.push({\r\n    title: 'Categories',\r\n    data: getRandomArray(20)\r\n  });\r\n\r\n  // data.push({\r\n  //   title: 'Categories',\r\n  //   data: getRandomArray(10)\r\n  // });\r\n\r\n  // data.push({\r\n  //   title: 'Data 4',\r\n  //   data: getRandomArray(6)\r\n  // });\r\n\r\n  return data;\r\n}\r\n\r\nclass ChartHandler extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      // data=[{label, plus, minus}, ...]\r\n      dataArray: getRandomArray(10)//getData()\r\n    };\r\n\r\n    this.updateChart = this.updateChart.bind(this);\r\n  }\r\n\r\n  updateChart(plus, minus) {\r\n    let newData = {label: \"df\", plus: plus, minus: minus * -1};\r\n\r\n    if(this.state.dataArray.length >= 10) {\r\n      console.log('Dataset data is longer than MAX_DATA_LENGTH (' + 10 + '), removing first datapoint');\r\n      // Remove the label first\r\n      // this.myChart.shift();\r\n    }\r\n\r\n    this.setState({\r\n      dataArray: [...this.state.dataArray, newData]\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({ data: getData() });\r\n    \r\n    // window.setInterval(() => {\r\n    //   this.setState({\r\n    //     data: getData()\r\n    //   })\r\n    // }, 5000)\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <React.Fragment>\r\n        <BarChart data={this.state.dataArray} />\r\n        <ChartControls onSubmit={this.updateChart} />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ChartHandler;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport ChartHandler from './components/ChartHandler';\r\n// import PostItHandler from './components/post_it_handler/post_it_handler';\r\n\r\n/*\r\nhttps://reactjs.org/docs/thinking-in-react.html\r\n\r\n- ChartHandler: State=[{date, plus, minus}, ...]\r\n  - Chart: Props=[{date, plus, minus}, ...]\r\n  - ChartControls State{plus, minus} Props={update function}\r\n    - NumberInput: Props={plus}\r\n    - NumberInput: Props={minus}\r\n    - SubmitButton: Props={onSubmit = update function}\r\n\r\n- PostItHandler\r\n  - TBD\r\n\r\nDeploy to GitHub Pages:\r\nhttps://dev.to/yuribenjamin/how-to-deploy-react-app-in-github-pages-2a1f\r\n\r\nChart JS:\r\nhttps://www.chartjs.org/\r\nhttps://www.chartjs.org/samples/latest/charts/bar/stacked.html\r\n\r\nChart JS & React:\r\nhttps://www.createwithdata.com/react-chartjs-dashboard/\r\n\r\nReact refs:\r\nhttps://reactjs.org/docs/forwarding-refs.html\r\nhttps://blog.logrocket.com/how-to-use-react-createref-ea014ad09dba/\r\n\r\n*/\r\n\r\n/*\r\nFor ChartController maybe?\r\nhttps://reactpatterns.com/\r\n\r\nhandleEvent({type}) {\r\n  switch(type) {\r\n    case \"click\":\r\n    case \"mouseenter\":\r\n      return this.setState({ hovered: true })\r\n    case \"mouseleave\":\r\n      return this.setState({ hovered: false })\r\n    default:\r\n      return console.warn(`No case for event type \"${type}\"`)\r\n  }\r\n}\r\n\r\nclass ControlledNameInput extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = { name: \"\" };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <input\r\n        value={this.state.name}\r\n        onChange={e => this.setState({ name: e.target.value })}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\n*/\r\n\r\nReactDOM.render(<ChartHandler />, document.getElementById('chart-handler'));\r\n// ReactDOM.render(<PostItHandler />, document.getElementById('right-container'));"],"sourceRoot":""}