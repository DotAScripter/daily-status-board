{"version":3,"sources":["components/Chart.js","components/InputHandler.js","components/ChartHandler.js","index.js"],"names":["chartData","labels","datasets","label","backgroundColor","borderColor","borderWidth","data","chartOptions","responsive","maintainAspectRatio","legend","display","tooltips","bodyFontSize","titleFontSize","scales","xAxes","stacked","ticks","fontSize","yAxes","suggestedMin","suggestedMax","BarChart","props","canvasRef","React","createRef","this","myChart","Chart","current","type","options","map","d","value","update","ref","Component","ControlledNumberInput","state","number","Fragment","id","inputId","readOnly","onClick","e","setState","buttonId","buttonText","InputHandler","name","getRandomArray","numItems","i","push","Math","round","random","getRandomDateArray","baseTime","Date","getTime","time","getData","title","ChartHandler","window","setInterval","color","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c24716a1.chunk.js","sourcesContent":["import React from 'react';\r\nimport Chart from 'chart.js';\r\n\r\nvar chartData = {\r\n  labels: [],\r\n  datasets: [{\r\n    label: 'Plus',\r\n    backgroundColor: 'rgb(34, 175, 34, 0.6)', // Green, opacity\r\n    borderColor: 'rgb(34, 175, 34)', // Green\r\n    borderWidth: 1,\r\n    data: []\r\n  }, {\r\n    label: 'Minus',\r\n    backgroundColor: 'rgb(220, 20, 60, 0.6)', // Red, opacity\r\n    borderColor: 'rgb(220, 20, 60)', // Red\r\n    borderWidth: 1,\r\n    data: []\r\n  }]\r\n}; // chartData\r\n\r\nlet chartOptions = {\r\n  responsive: true,\r\n  maintainAspectRatio: false,\r\n  legend: {\r\n    display: false,\r\n  },\r\n  tooltips: {\r\n    bodyFontSize: 36,\r\n    titleFontSize: 18,\r\n        // callbacks: {\r\n        //   title: function(tooltipItem, data) {\r\n        //     // console.log(\"You're hovering on index: \" + tooltipItem[0]['index']);\r\n        //     return \"Comment:\";// + data['labels'][tooltipItem[0]['index']];\r\n        //   },\r\n        //   label: function(tooltipItem, data) {\r\n        //     // return data['datasets'][0]['data'][tooltipItem['index']];\r\n        //     let index = tooltipItem['index'];\r\n        //     return DAILY_COMMENTS[index];\r\n        //   },\r\n        //   afterLabel: function(tooltipItem, data) {\r\n        //     // var dataset = data['datasets'][0];\r\n        //     // var percent = Math.round((dataset['data'][tooltipItem['index']] / dataset[\"_meta\"][0]['total']) * 100)\r\n        //     // return '(' + percent + '%)';\r\n        //   }\r\n        // }\r\n  },\r\n  scales: {\r\n    xAxes: [{\r\n      stacked: true,\r\n      ticks: {\r\n        fontSize: 15,\r\n      }\r\n    }],\r\n    yAxes: [{\r\n      stacked: true,\r\n      ticks: {\r\n        fontSize: 25,\r\n        suggestedMin: 0,\r\n        suggestedMax: 8,\r\n      }\r\n    }]\r\n    }\r\n  }; // chartOptions\r\n\r\nclass BarChart extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.canvasRef = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.myChart = new Chart(this.canvasRef.current, {\r\n      type: 'bar',\r\n      options: chartOptions,\r\n      data: chartData,\r\n      // {\r\n      //   labels: this.props.data.map(d => d.label),\r\n      //   datasets: [{\r\n      //     label: this.props.title,\r\n      //     data: this.props.data.map(d => d.value),\r\n      //     backgroundColor: this.props.color\r\n      //   }]\r\n      // }\r\n    });\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.myChart.data.labels = this.props.data.map(d => d.label);\r\n    this.myChart.data.datasets[0].data = this.props.data.map(d => d.value);\r\n    this.myChart.update();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <canvas ref={this.canvasRef} />\r\n    );\r\n  }\r\n} // BarChart\r\n\r\nexport default BarChart;","import React from 'react';\r\n\r\nimport './InputHandler.css'\r\n\r\nclass ControlledNumberInput extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { number: 0 };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <input\r\n          type=\"number\"\r\n          value={this.state.number}\r\n          id={this.props.inputId}\r\n          readOnly\r\n        />\r\n        <button \r\n          onClick={e => this.setState({ number: this.state.number + 1 })}\r\n          id={this.props.buttonId}>\r\n            {this.props.buttonText}\r\n          </button>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nclass InputHandler extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = { name: \"\" };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div id=\"input-container\">\r\n          <div id=\"plus-container\">\r\n            <ControlledNumberInput\r\n              inputId=\"plusInput\"\r\n              buttonId=\"plusButton\"\r\n              buttonText=\"+\"\r\n            />\r\n          </div>\r\n          <div id=\"minus-container\">\r\n            <ControlledNumberInput\r\n              inputId=\"minusInput\"\r\n              buttonId=\"minusButton\"\r\n              buttonText=\"-\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <button id=\"submitData\">Submit</button>\r\n        <button id=\"addPostit\">Add Postit</button>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InputHandler;","import React from 'react';\r\n\r\nimport './ChartHandler.css';\r\n\r\nimport BarChart from './Chart';\r\nimport InputHandler from './InputHandler'\r\n\r\n// Data generation\r\nfunction getRandomArray(numItems) {\r\n  // Create random array of objects\r\n  let names = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n  let data = [];\r\n  for(var i = 0; i < numItems; i++) {\r\n    data.push({\r\n      label: names[i],\r\n      value: Math.round(20 + 80 * Math.random())\r\n    });\r\n  }\r\n  return data;\r\n}\r\n\r\nfunction getRandomDateArray(numItems) {\r\n  // Create random array of objects (with date)\r\n  let data = [];\r\n  let baseTime = new Date('2018-05-01T00:00:00').getTime();\r\n  let dayMs = 24 * 60 * 60 * 1000;\r\n  for(var i = 0; i < numItems; i++) {\r\n    data.push({\r\n      time: new Date(baseTime + i * dayMs),\r\n      value: Math.round(20 + 80 * Math.random())\r\n    });\r\n  }\r\n  return data;\r\n}\r\n\r\nfunction getData() {\r\n  let data = [];\r\n\r\n  data.push({\r\n    title: 'Visits',\r\n    data: getRandomDateArray(150)\r\n  });\r\n\r\n  data.push({\r\n    title: 'Categories',\r\n    data: getRandomArray(20)\r\n  });\r\n\r\n  data.push({\r\n    title: 'Categories',\r\n    data: getRandomArray(10)\r\n  });\r\n\r\n  data.push({\r\n    title: 'Data 4',\r\n    data: getRandomArray(6)\r\n  });\r\n\r\n  return data;\r\n}\r\n\r\nclass ChartHandler extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      data: getData()\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.setInterval(() => {\r\n      this.setState({\r\n        data: getData()\r\n      })\r\n    }, 5000)\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <React.Fragment>\r\n        <div id=\"chart-container\">\r\n          <BarChart\r\n            data={this.state.data[1].data}\r\n            title={this.state.data[1].title}\r\n            color=\"#70CAD1\"\r\n          />\r\n        </div>\r\n\r\n        <div id=\"chart-controls\">\r\n          <InputHandler/>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ChartHandler;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport ChartHandler from './components/ChartHandler';\n// import PostItHandler from './components/post_it_handler/post_it_handler';\n\n/*\nhttps://reactjs.org/docs/thinking-in-react.html\n\n- ChartHandler\n  - ChartContainer\n    - Chart\n  - ChartInputHandler\n    - InputContainer (?)\n      - NumberInput\n      - NumberInput\n    - InputContainer (?)\n      - Button\n\n- PostItHandler\n  - TBD\n\nDeploy to GitHub Pages:\nhttps://dev.to/yuribenjamin/how-to-deploy-react-app-in-github-pages-2a1f\n\nChart JS:\nhttps://www.chartjs.org/\nhttps://www.chartjs.org/samples/latest/charts/bar/stacked.html\n\nChart JS & React:\nhttps://www.createwithdata.com/react-chartjs-dashboard/\n\nReact refs:\nhttps://reactjs.org/docs/forwarding-refs.html\nhttps://blog.logrocket.com/how-to-use-react-createref-ea014ad09dba/\n\n*/\n\n/*\nFor ChartController maybe?\nhttps://reactpatterns.com/\n\nhandleEvent({type}) {\n  switch(type) {\n    case \"click\":\n    case \"mouseenter\":\n      return this.setState({ hovered: true })\n    case \"mouseleave\":\n      return this.setState({ hovered: false })\n    default:\n      return console.warn(`No case for event type \"${type}\"`)\n  }\n}\n\nclass ControlledNameInput extends React.Component {\n  constructor() {\n    super();\n    this.state = { name: \"\" };\n  }\n\n  render() {\n    return (\n      <input\n        value={this.state.name}\n        onChange={e => this.setState({ name: e.target.value })}\n      />\n    );\n  }\n}\n\n*/\n\nReactDOM.render(<ChartHandler />, document.getElementById('left-container'));\n// ReactDOM.render(<PostItHandler />, document.getElementById('right-container'));"],"sourceRoot":""}